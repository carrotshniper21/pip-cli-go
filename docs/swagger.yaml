basePath: /pipebomb/api
definitions:
  anime.AnimeSearch:
    properties:
      data:
        properties:
          shows:
            properties:
              edges:
                items:
                  properties:
                    __typename:
                      type: string
                    _id:
                      type: string
                    airedStart:
                      type: object
                    availableEpisodes:
                      properties:
                        dub:
                          type: integer
                        raw:
                          type: integer
                        sub:
                          type: integer
                      type: object
                    englishName: {}
                    episodeCount: {}
                    episodeDuration: {}
                    lastUpdateEnd:
                      type: string
                    name:
                      type: string
                    nativeName: {}
                    thumbnail:
                      type: string
                    type: {}
                  type: object
                type: array
            type: object
        type: object
    type: object
  anime.AnimeSource:
    properties:
      data:
        properties:
          episode:
            properties:
              episodeString:
                type: string
              sourceUrls:
                items:
                  properties:
                    className:
                      type: string
                    downloads:
                      properties:
                        downloadUrl:
                          type: string
                        sourceName:
                          type: string
                      type: object
                    mobile:
                      properties:
                        downloadUrl:
                          type: string
                        sourceName:
                          type: string
                      type: object
                    priority:
                      type: number
                    sandbox:
                      type: string
                    sourceName:
                      type: string
                    sourceUrl:
                      type: string
                    streamerId:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
            type: object
        type: object
    type: object
  film.FilmSearch:
    description: stores the film data
    properties:
      casts:
        example:
        - cast
        items:
          type: string
        type: array
      country:
        example:
        - country
        items:
          type: string
        type: array
      description:
        example: Description
        type: string
      duration:
        example: 0 min
        type: string
      genres:
        example:
        - genre
        items:
          type: string
        type: array
      href:
        example: https://example.com/film/1
        type: string
      id:
        example: movie/film-1
        type: string
      idParts:
        $ref: '#/definitions/film.IdSplit'
      poster:
        example: https://example.com/poster/1.jpg
        type: string
      production:
        example:
        - production
        items:
          type: string
        type: array
      released:
        example: "2000"
        type: string
      title:
        example: Film
        type: string
    type: object
  film.FilmServer:
    properties:
      linkID:
        type: string
      serverName:
        type: string
    type: object
  film.FilmSourcesEncrypted:
    properties:
      server:
        type: integer
      sources:
        type: string
      tracks:
        items:
          $ref: '#/definitions/film.Track'
        type: array
    type: object
  film.IdSplit:
    description: stores the film ID parts
    properties:
      idNum:
        example: 1
        type: integer
      name:
        example: film
        type: string
      type:
        example: movie
        type: string
    type: object
  film.Track:
    properties:
      default:
        type: boolean
      file:
        type: string
      kind:
        type: string
      label:
        type: string
    type: object
  profiles.Achievement:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  profiles.Profile:
    properties:
      achievements:
        items:
          $ref: '#/definitions/profiles.Achievement'
        type: array
      bio:
        type: string
      image:
        type: string
      name:
        type: string
      philosophy:
        type: string
      socialLinks:
        items:
          $ref: '#/definitions/profiles.Social'
        type: array
    type: object
  profiles.Social:
    properties:
      icon:
        type: string
      name:
        type: string
      url:
        type: string
    type: object
  profiles.User:
    properties:
      avatar:
        type: string
      profile:
        $ref: '#/definitions/profiles.Profile'
      username:
        type: string
    type: object
  show.Episode:
    properties:
      episodeID:
        type: string
      title:
        type: string
    type: object
  show.IdSplit:
    description: stores the show ID parts
    properties:
      idNum:
        example: 1
        type: integer
      name:
        example: show
        type: string
      type:
        example: show
        type: string
    type: object
  show.ShowSearch:
    description: stores the show data
    properties:
      casts:
        example:
        - cast
        items:
          type: string
        type: array
      country:
        example:
        - country
        items:
          type: string
        type: array
      description:
        example: Description
        type: string
      duration:
        example: 0 min
        type: string
      genres:
        example:
        - genre
        items:
          type: string
        type: array
      href:
        example: https://example.com/show/1
        type: string
      id:
        example: show/episode-1
        type: string
      idParts:
        $ref: '#/definitions/show.IdSplit'
      poster:
        example: https://example.com/poster/1.jpg
        type: string
      production:
        example:
        - production
        items:
          type: string
        type: array
      released:
        example: "2000"
        type: string
      title:
        example: Show
        type: string
    type: object
  show.ShowSeason:
    properties:
      episodes:
        items:
          $ref: '#/definitions/show.Episode'
        type: array
      serverID:
        type: string
      serverName:
        type: string
    type: object
  show.ShowServer:
    properties:
      linkID:
        type: string
      serverName:
        type: string
    type: object
  show.ShowSourcesEncrypted:
    properties:
      server:
        type: integer
      sources:
        type: string
      tracks:
        items:
          $ref: '#/definitions/show.Track'
        type: array
    type: object
  show.Track:
    properties:
      default:
        type: boolean
      file:
        type: string
      kind:
        type: string
      label:
        type: string
    type: object
host: anij.bytecats.codes
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: https://github.com/ani-social
  description: Pipebomb API for searching and streaming movies
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://ani-j.netlify.app/tos/
  title: Pipebomb API
  version: "6.9"
paths:
  /anime/all/search:
    get:
      consumes:
      - application/json
      description: Search for anime by query
      parameters:
      - description: Search Query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/anime.AnimeSearch'
      summary: Search for anime
      tags:
      - Anime
  /anime/all/sources:
    get:
      consumes:
      - application/json
      description: Fetch anime sources by show ID
      parameters:
      - description: anime ID
        in: query
        name: id
        required: true
        type: string
      - description: translation Type
        in: query
        name: tt
        required: true
        type: string
      - description: episode Number
        in: query
        name: e
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/anime.AnimeSource'
            type: array
      summary: Fetch anime sources
      tags:
      - Anime
  /api/profiles/users:
    get:
      description: Retrieve a list of all users
      operationId: get-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/profiles.User'
            type: array
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the given data
      operationId: create-user
      parameters:
      - description: User to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/profiles.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profiles.User'
      summary: Create a new user
      tags:
      - Users
  /api/profiles/users/{username}:
    delete:
      description: Delete a user by their username
      operationId: delete-user
      parameters:
      - description: Username of the user to be deleted
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profiles.User'
        "404":
          description: User not found
      summary: Delete a user
      tags:
      - Users
    get:
      description: Retrieve a user by their username
      operationId: get-user
      parameters:
      - description: Username of the user to be fetched
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profiles.User'
        "404":
          description: User not found
      summary: Get a specific user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user's data by their username
      operationId: update-user
      parameters:
      - description: Username of the user to be updated
        in: path
        name: username
        required: true
        type: string
      - description: Updated user data
        in: body
        name: updatedUser
        required: true
        schema:
          $ref: '#/definitions/profiles.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profiles.User'
        "404":
          description: User not found
      summary: Update a user
      tags:
      - Users
  /films/vip/search:
    get:
      consumes:
      - application/json
      description: Search for films by query
      parameters:
      - description: Search Query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/film.FilmSearch'
      summary: Search for films
      tags:
      - Films
  /films/vip/servers:
    get:
      consumes:
      - application/json
      description: Fetch film servers by film ID
      parameters:
      - description: Film ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/film.FilmServer'
            type: array
      summary: Fetch film servers
      tags:
      - Films
  /films/vip/sources:
    get:
      consumes:
      - application/json
      description: Fetch film servers by server ID
      parameters:
      - description: Server ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/film.FilmSourcesEncrypted'
            type: array
      summary: Fetch film sources
      tags:
      - Films
  /series/vip/search:
    get:
      consumes:
      - application/json
      description: Search for shows by query
      parameters:
      - description: Search Query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/show.ShowSearch'
      summary: Search for shows
      tags:
      - Series
  /series/vip/seasons:
    get:
      consumes:
      - application/json
      description: Fetch show seasons and episodes by show ID
      parameters:
      - description: Show ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/show.ShowSeason'
            type: array
      summary: Fetch show seasons and episodes
      tags:
      - Series
  /series/vip/servers:
    get:
      consumes:
      - application/json
      description: Fetch show servers by episode ID
      parameters:
      - description: Episode ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/show.ShowServer'
            type: array
      summary: Fetch show servers
      tags:
      - Series
  /series/vip/sources:
    get:
      consumes:
      - application/json
      description: Fetch show servers by server ID
      parameters:
      - description: Server ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/show.ShowSourcesEncrypted'
            type: array
      summary: Fetch show sources
      tags:
      - Series
schemes:
- https
- http
swagger: "2.0"
